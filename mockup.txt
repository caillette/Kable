
Playbook1 {


  + "Creating users"

  + user(
      name = "otcdlink"
      uid = 1234
      group = "otcdlink"
      groups = [ "vboxsf, staff" ]
      shell = "/bin/bash"      
  )
  
  // Loop should get a reference to the factory method which propagates the type.
  // kFunction.returnType.defaultType
  %loop( 1..10, i -> user( name="u$i" ) )
  
  // Real type is Capture< ActionResult >.
  val jreProgress = 
  + jre() 
  
  // Real type is Capture< Array< String > >
  val networkInterfaces =
  + cat( "/etc/network/interfaces" ).stdout
  
  + waitFor( jreProgress )
  
  
  // Can pre-instantiate Actions if factory method has no argument.
  + switch( 
    context.osx -> file( name = "doit.command", chmod = "u+x" )
    context.linux -> file( "doit.sh", chmod = "u+x" )
  ) 


  +include( Playbook2( interfaces ) )
}



Playbook2( Capture< String > whatever ) {

}